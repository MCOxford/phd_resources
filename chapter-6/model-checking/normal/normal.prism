// Author: mco 
// Timestamp: 21-09-2020

dtmc
		//initial states for each client
const bool c1_sth_init = false;
const bool c2_sth_init = false;
const bool c3_sth_init = false;
const bool c4_sth_init = false;
const bool c5_sth_init = true;

		//client connect rates
prob g1 = 0.5 ;
prob g2 = 0.5 ;
prob g3 = 0.5 ;
prob g4 = 0.5 ;
prob g5 = 0.5 ;

		//client profiles
prob p_1_1 = 0.3668879123565087 ;
prob p_1_2 = 0.2566248732131312 ;
prob p_1_3 = 0.027175713713532678 ;
prob p_1_4 = 0.2690779071661857 ;
prob p_1_5 = 0.08023359355064175 ;

prob p_2_1 = 0.3668879123565087 ;
prob p_2_2 = 0.2566248732131312 ;
prob p_2_3 = 0.027175713713532678 ;
prob p_2_4 = 0.2690779071661857 ;
prob p_2_5 = 0.08023359355064175 ;

prob p_3_1 = 0.3668879123565087 ;
prob p_3_2 = 0.2566248732131312 ;
prob p_3_3 = 0.027175713713532678 ;
prob p_3_4 = 0.2690779071661857 ;
prob p_3_5 = 0.08023359355064175 ;

prob p_4_1 = 0.21393874414500336 ;
prob p_4_2 = 0.2279971450578929 ;
prob p_4_3 = 0.06076849802908572 ;
prob p_4_4 = 0.1741089991148236 ;
prob p_4_5 = 0.32318661365319445 ;

prob p_5_1 = 0.03965211147346438 ;
prob p_5_2 = 0.09915021940963915 ;
prob p_5_3 = 0.2943075813674938 ;
prob p_5_4 = 0.2529642146586943 ;
prob p_5_5 = 0.3139258730907084 ;


		
	module Client1 

		//global state.
		c1 : [0..5] init 0;
		//connectivity state.
		c1s : [0..5] init 0;
		//current STH data stored by the client. 'True' means the client has the latest STH.
		c1_sth : bool init c1_sth_init;
		//skip the round?
		c1_skip : bool init false;

		//client decides randomly to participate in the round.
		[connect] c1=0 -> g1 : (c1'=1) + 1-g1 : (c1'=1) & (c1_skip'=true);
		//client randomly chooses a server if participating in the round.
		[choose] c1_skip=false & c1=1 -> p_1_1 : (c1'=2)&(c1s'=1) + p_1_2 : (c1'=2)&(c1s'=2) + p_1_3 : (c1'=2)&(c1s'=3) + 
						 p_1_4 : (c1'=2)&(c1s'=4) + p_1_5 : (c1'=2)&(c1s'=5);
		[choose] c1_skip=true & c1=1 -> (c1'=2);
		//client updates itself using data retrieved from server so long as c1_skip=false or c1_sth=true.
		[update] c1_skip=false & c1=2 & connected_server_has_sth  -> (c1'=3) & (c1_sth'=true);
		[update] c1=2 & ((c1_skip=false & !connected_server_has_sth) | c1_skip=true) -> (c1'=3);
		//round complete - reset if there is a client who is not yet updated. Otherwise, stop.
		[round_complete] c1=3 & !clients_all_updated -> (c1'=0) & (c1s'=0) & (c1_skip'=false);
		[round_complete] c1=3 & clients_all_updated -> (c1'=4);
		//self-looping state - go here when every client is updated.
		[END] c1=4 -> true;

	endmodule

	formula connected_server_has_sth = ((c1s=1 & s1_sth) | (c1s=2 & s2_sth) | (c1s=3 & s3_sth) | (c1s=4 & s4_sth) | (c1s=5 & s5_sth));
	formula clients_all_updated = c1_sth&c2_sth&c3_sth&c4_sth&c5_sth;
	label "clients_all_updated" = c1_sth&c2_sth&c3_sth&c4_sth&c5_sth;

	module Client2=Client1[p_1_1=p_2_1,p_1_2=p_2_2,p_1_3=p_2_3,p_1_4=p_2_4,p_1_5=p_2_5,
	g1=g2,c1=c2,c1s=c2s, c1_sth=c2_sth, c2_sth=c1_sth, c1_skip=c2_skip, c1_sth_init = c2_sth_init] endmodule

	module Client3=Client1[p_1_1=p_3_1,p_1_2=p_3_2,p_1_3=p_3_3,p_1_4=p_3_4,p_1_5=p_3_5,
	g1=g3,c1=c3,c1s=c3s, c1_sth=c3_sth, c3_sth=c1_sth, c1_skip=c3_skip, c1_sth_init = c3_sth_init] endmodule

	module Client4=Client1[p_1_1=p_4_1,p_1_2=p_4_2,p_1_3=p_4_3,p_1_4=p_4_4,p_1_5=p_4_5,
	g1=g4,c1=c4,c1s=c4s, c1_sth=c4_sth, c4_sth=c1_sth, c1_skip=c4_skip, c1_sth_init = c4_sth_init] endmodule

	module Client5=Client1[p_1_1=p_5_1,p_1_2=p_5_2,p_1_3=p_5_3,p_1_4=p_5_4,p_1_5=p_5_5,
	g1=g5,c1=c5,c1s=c5s, c1_sth=c5_sth, c5_sth=c1_sth, c1_skip=c5_skip, c1_sth_init = c5_sth_init] endmodule
	
		//needed for module relabelling
const bool s1_init = false;
const bool s2_init = false;
const bool s3_init = true;
const bool s4_init = false;
const bool s5_init = false;

		
	//needed for module relabelling
	const int S1 = 1;
	const int S2 = 2;
	const int S3 = 3;
	const int S4 = 4;
	const int S5 = 5;

	module Server1

		//does the server have the latest STH?
		s1_sth : bool init s1_init;

		//update if a connected client has the latest STH
		[update] !s1_sth & connected_client_has_sth -> (s1_sth'=true);
		[update] s1_sth | (!s1_sth & !connected_client_has_sth) -> true;
		//server-to-server gossip - this is done during the 'connect' phase to make data spreading more effective
		//[connect] !s1_sth -> get_data : (s1_sth'=true) + 1-get_data : true;
		//[connect] s1_sth -> true;
		//end when every client is updated
		[END] true -> true;

	endmodule

	formula connected_client_has_sth = (c1s=S1 & c1_sth) | (c2s=S1 & c2_sth) | (c3s=S1 & c3_sth) | (c4s=S1 & c4_sth) | (c5s=S1 & c5_sth);

	module Server2=Server1[s1_sth=s2_sth, s2_sth=s1_sth, S1=S2, s1_init=s2_init] endmodule
	module Server3=Server1[s1_sth=s3_sth, s3_sth=s1_sth, S1=S3, s1_init=s3_init] endmodule
	module Server4=Server1[s1_sth=s4_sth, s4_sth=s1_sth, S1=S4, s1_init=s4_init] endmodule
	module Server5=Server1[s1_sth=s5_sth, s5_sth=s1_sth, S1=S5, s1_init=s5_init] endmodule
	
		
	const double f = 1/5;

	//Keeps track of the proportion of clients that have the latest STH - max sum should equal 1.
	formula no_clients_updated = (c1_sth?f:0)+(c2_sth?f:0)+(c3_sth?f:0)+(c4_sth?f:0)+(c5_sth?f:0);

	//For STH-Only, client requests an extension proof if the retrieved gossip message has a different tree size to what the client has
	formula client1_getConsistency_STHOnly = c1_skip=false & c1=2 & ((c1s=1 & c1_sth!=s1_sth) | (c1s=2 & c1_sth!=s2_sth) | (c1s=3 & c1_sth!=s3_sth) | 
									 (c1s=4 & c1_sth!=s4_sth) | (c1s=5 & c1_sth!=s5_sth));
	formula client2_getConsistency_STHOnly = c2_skip=false & c2=2 & ((c2s=1 & c2_sth!=s1_sth) | (c2s=2 & c2_sth!=s2_sth) | (c2s=3 & c2_sth!=s3_sth) | 
									 (c2s=4 & c2_sth!=s4_sth) | (c2s=5 & c2_sth!=s5_sth));
	formula client3_getConsistency_STHOnly = c3_skip=false & c3=2 & ((c3s=1 & c3_sth!=s1_sth) | (c3s=2 & c3_sth!=s2_sth) | (c3s=3 & c3_sth!=s3_sth) | 
								         (c3s=4 & c3_sth!=s4_sth) | (c3s=5 & c3_sth!=s5_sth));
	formula client4_getConsistency_STHOnly = c4_skip=false & c4=2 & ((c4s=1 & c4_sth!=s1_sth) | (c4s=2 & c4_sth!=s2_sth) | (c4s=3 & c4_sth!=s3_sth) | 
								  	 (c4s=4 & c4_sth!=s4_sth) | (c4s=5 & c4_sth!=s5_sth));
	formula client5_getConsistency_STHOnly = c5_skip=false & c5=2 & ((c5s=1 & c5_sth!=s1_sth) | (c5s=2 & c5_sth!=s2_sth) | (c5s=3 & c5_sth!=s3_sth) | 
									 (c5s=4 & c5_sth!=s4_sth) | (c5s=5 & c5_sth!=s5_sth));

	//Keeps track of the log connection currently being made using the STH-Only protocol
	formula log_connections_STHOnly = (client1_getConsistency_STHOnly?1:0)+(client2_getConsistency_STHOnly?1:0)+(client3_getConsistency_STHOnly?1:0)+
					  (client4_getConsistency_STHOnly?1:0)+(client5_getConsistency_STHOnly?1:0);

	//For STH-and-Proof, client requests an extension proof if it updated and the connecting server does not.
	formula client1_getConsistency_STHAndProof = c1_skip=false & c1=2 & ((c1s=1 & c1_sth & !s1_sth) | (c1s=2 & c1_sth & !s2_sth) | (c1s=3 & c1_sth & !s3_sth) | 
									     (c1s=4 & c1_sth & !s4_sth) | (c1s=5 & c1_sth & !s5_sth));
	formula client2_getConsistency_STHAndProof = c2_skip=false & c2=2 & ((c2s=1 & c2_sth & !s1_sth) | (c2s=2 & c2_sth & !s2_sth) | (c2s=3 & c2_sth & !s3_sth) | 
									     (c2s=4 & c2_sth & !s4_sth) | (c2s=5 & c2_sth & !s5_sth));
	formula client3_getConsistency_STHAndProof = c3_skip=false & c3=2 & ((c3s=1 & c3_sth & !s1_sth) | (c3s=2 & c3_sth & !s2_sth) | (c3s=3 & c3_sth & !s3_sth) | 
									     (c3s=4 & c3_sth & !s4_sth) | (c3s=5 & c3_sth & !s5_sth));
	formula client4_getConsistency_STHAndProof = c4_skip=false & c4=2 & ((c4s=1 & c4_sth & !s1_sth) | (c4s=2 & c4_sth & !s2_sth) | (c4s=3 & c4_sth & !s3_sth) | 
								             (c4s=4 & c4_sth & !s4_sth) | (c4s=5 & c4_sth & !s5_sth));
	formula client5_getConsistency_STHAndProof = c5_skip=false & c5=2 & ((c5s=1 & c5_sth & !s1_sth) | (c5s=2 & c5_sth & !s2_sth) | (c5s=3 & c5_sth & !s3_sth) | 
									     (c5s=4 & c5_sth & !s4_sth) | (c5s=5 & c5_sth & !s5_sth));

	//Keeps track of the log connection currently being made using the STH-and-Proof protocol
	formula log_connections_STHAndProof = (client1_getConsistency_STHAndProof?1:0)+(client2_getConsistency_STHAndProof?1:0)+
					      (client3_getConsistency_STHAndProof?1:0)+(client4_getConsistency_STHAndProof?1:0)+
					      (client5_getConsistency_STHAndProof?1:0);

	rewards "rounds"
		true : 1/4;
	endrewards

	rewards "client_proportion"
		true : no_clients_updated;
	endrewards

	rewards "client_proportion_sq"
		true : no_clients_updated*no_clients_updated;
	endrewards

	rewards "log_connections_STHOnly"
		true: log_connections_STHOnly;
	endrewards

	rewards "log_connections_STHOnly_sq"
		true : log_connections_STHOnly*log_connections_STHOnly;
	endrewards

	rewards "log_connections_STHAndProof"
		true : log_connections_STHAndProof;
	endrewards

	rewards "log_connections_STHAndProof_sq"
		true : log_connections_STHAndProof*log_connections_STHAndProof;
	endrewards
	