//Timestamp: 2020-09-21


//***INVESTIGATING SPLIT WORLD DETECTION VIA THE PERRIG GOSSIP PROTOCOLS USED FOR CT***

//***INTRODUCTION***************
//
// In this model we investigate how effective the Perrig protocols are in detecting a simple split-world scenario occuring. 
// We shall also measure the STH data spread and protocol efficiency i.e. how many times on average will clients need to 
// contact the log when executing the protocol?.
//
// Hypothetically, the data spread for both versions of the Perrig protocol should be the same because it should only depend 
// on the behaviour of the clients when they connect and gossip with servers. We assume clients connect to only ONE server 
// if participating in a round. 
//
//******************************  

//***THREAT MODEL***************
//
// Before the rounds of gossiping begin, the log decides to initiate a split world attack and by maintaining two separate ledgers forked from
// the original log at tree size l (which is the current size everybody in the network knows):
//
// i) the genuine log presented to the entire world, and
// ii) the 'rogue' log the maintainer wants to keep hidden. It has appended to it a fake certificates which are used by servers pretending 
//     to host ligitimate domains, including one present in the network. 
//
// The new STHs corresponding to these logs are s_m and s_n respectively, where m and n are tree sizes, m < n and timestamp(s_m) < timestamp(s_n).
// That way, the built-in checkSTH() function can be bypassed. Suppose that the log maintainer is in collusion with a 'spoof server' using 
// a fake certificate, their goal being to steal information from a particular user when they connect to the server. If somehow a targeted 
// client can have its network controlled so that any proof/STH requests it makes is redirected to the fake log, then after gossiping with the 
// 'spoof server' the client updates itself using the STH s_n; suppose that this does happen, meaning that at the beginning we have one updated 
// server with data s_m and one client with s_n. Everyone else has the old STH s_l (such that l < m < n). The spoof server is never contacted again 
// afterwards (or the probability of being contacted is is so small it is negligible).
//
//******************************

//***MODEL DESIGN ASSUMPTIONS***
//
// i) Clients and server already have valid and non-empty data (tree size of stored STHs are non-zero) to begin with.
// ii) Everyone in the network, apart from the designated server and targeted client, possesses the same knowledge of 
//     the log before the new root hash is generated.
// iii) Assume all clients and servers are able to gossip.
// iv) Audit sets for all clients contain an SCT for each server in the network. This mean clients do not need to audit SCTs 
//     as part of the protocol execution.
// v) Two entities are already updated from the start - assume this is a server and a client.
//
//****************************** 

//***CLIENT TYPE FREQUENCY******
//
// Seller - 1
// Regular - 3
// Researcher - 1
//
//******************************

dtmc

//--------------
// CLIENTS
//--------------

const bool c0_flag = true;

//initial states for each client
const int c1_sth_init = 2;
const int c2_sth_init = 0;
const int c3_sth_init = 0;
const int c4_sth_init = 0;
const int c5_sth_init = 0;

//client connect rates
prob g1= 0.5;
prob g2= 0.5;
prob g3= 0.5;
prob g4= 0.5;
prob g5= 0.5;

//client profiles
prob p_1_1 = 0.33438219267483904;
prob p_1_2 = 0.2068075423816448;
prob p_1_3 = 0.03475587840339814;
prob p_1_4 = 0.2774021413473147;
prob p_1_5 = 0.1466522451928034;

prob p_2_1 = 0.24804575432397954;
prob p_2_2 = 0.22580942704319454;
prob p_2_3 = 0.06304143915330328;
prob p_2_4 = 0.11347452350840198;
prob p_2_5 = 0.3496288559711207;

prob p_3_1 = 0.24804575432397954;
prob p_3_2 = 0.22580942704319454;
prob p_3_3 = 0.06304143915330328;
prob p_3_4 = 0.11347452350840198;
prob p_3_5 = 0.3496288559711207;

prob p_4_1 = 0.24804575432397954;
prob p_4_2 = 0.22580942704319454;
prob p_4_3 = 0.06304143915330328;
prob p_4_4 = 0.11347452350840198;
prob p_4_5 = 0.3496288559711207;

prob p_5_1 = 0.05541083461008604;
prob p_5_2 = 0.21726869238687518;
prob p_5_3 = 0.07717983199961229;
prob p_5_4 = 0.25166913349111814;
prob p_5_5 = 0.3984715075123084;


module Client1 

	//global state
	c1 : [0..5] init 0;
	//connectivity state
	c1s : [0..5] init 0;
	//Record which root hash this node currently has.
	c1_sth : [0..2] init c1_sth_init;
	//detection state
	c1d : bool init false;
	//skip the round?
	c1_skip : bool init false;
	c1_flag : bool init false;

	//client decides randomly to participate in the round
	[] c0_flag & c1=0 -> g1 : (c1'=1) + 1-g1 : (c1'=1) & (c1_skip'=true);
	//client randomly chooses a server if participating in the round.
	[] c0_flag & c1_skip=false & c1=1 -> p_1_1 : (c1_flag'=true)&(c1'=2)&(c1s'=1) +
					     p_1_2 : (c1_flag'=true)&(c1'=2)&(c1s'=2) +
					     p_1_3 : (c1_flag'=true)&(c1'=2)&(c1s'=3) +
					     p_1_4 : (c1_flag'=true)&(c1'=2)&(c1s'=4) +
					     p_1_5 : (c1_flag'=true)&(c1'=2)&(c1s'=5);
	[] c0_flag & c1_skip=true & c1=1 -> (c1_flag'=true)&(c1'=2);
	//client updates itself using data retrieved from server, checking that no issues are present (so long as c1_skip=false).
	[update] serverg & !c1_skip & c1=2 & s_data_ok -> (c1_sth'=c_update) & (c1'=3);
	[update] serverg & !c1_skip & c1=2 & !s_data_ok -> (c1d'=true) & (c1'=3);
 	[update] serverg & c1_skip & c1=2 -> (c1'=3);
	//round complete - start the next round if there no client has found an issue with the log. Otherwise, go to self-looping state and stop.
	[round_complete] c1=3 & !detect -> (c1'=0) & (c1s'=0) & (c1_skip'=false) & (c1_flag'=false);
	[round_complete] c1=3 & detect -> (c1'=4) & (c1s'=0) & (c1_skip'=false);
	//self-looping state
	[END] c1=4 -> true;

endmodule

//pr_req_successful is true if either a) log returns a valid proof or 
//b) client does not need to contact log in the first place 

formula pr_req_successful = (c1s=1 & s1_sth+c1_sth!=3) | (c1s=2 & s2_sth+c1_sth!=3) |
(c1s=3 & s3_sth+c1_sth!=3) | (c1s=4 & s4_sth+c1_sth!=3) |
(c1s=5 & s5_sth+c1_sth!=3);

// Warning messages are used when someone has already found an inconsistency and starts to report this to other nodes through gossiping.
formula warn_msg = (c1s=1 & s1d) | (c1s=2 & s2d) | (c1s=3 & s3d) | (c1s=4 & s4d) | (c1s=5 & s5d);

// Clients update when given brand new data via a server
formula c_update = c1_sth + ((c1s=1 & s1_sth>c1_sth)?s1_sth-c1_sth:0) + ((c1s=2 & s2_sth>c1_sth)?s2_sth-c1_sth:0) + 
((c1s=3 & s3_sth>c1_sth)?s3_sth-c1_sth:0) + ((c1s=4 & s4_sth>c1_sth)?s4_sth-c1_sth:0) + 
((c1s=5 & s5_sth>c1_sth)?s5_sth-c1_sth:0);

// An issue will be found in the data if either a) log cannot provide a valid proof or b) client gets a warning message.
formula s_data_ok = pr_req_successful & !warn_msg;

formula detect = c1d | c2d | c3d | c4d | c5d;
label "detect" = c1d | c2d | c3d | c4d | c5d;
formula serverg = s1_flag=2&s2_flag=2&s3_flag=2&s4_flag=2&s5_flag=2;

module Client2=Client1[p_1_1=p_2_1,p_1_2=p_2_2,p_1_3=p_2_3,p_1_4=p_2_4,p_1_5=p_2_5,
g1=g2,c1=c2,c1s=c2s, c1_sth=c2_sth,c1_skip=c2_skip,c1d=c2d, c2d=c1d,c1_sth_init = c2_sth_init, c1_flag=c2_flag, c0_flag=c1_flag] endmodule

module Client3=Client1[p_1_1=p_3_1,p_1_2=p_3_2,p_1_3=p_3_3,p_1_4=p_3_4,p_1_5=p_3_5,
g1=g3,c1=c3,c1s=c3s, c1_sth=c3_sth,c1_skip=c3_skip,c1d=c3d, c3d=c1d,c1_sth_init = c3_sth_init, c1_flag=c3_flag, c0_flag=c2_flag] endmodule

module Client4=Client1[p_1_1=p_4_1,p_1_2=p_4_2,p_1_3=p_4_3,p_1_4=p_4_4,p_1_5=p_4_5,
g1=g4,c1=c4,c1s=c4s, c1_sth=c4_sth,c1_skip=c4_skip,c1d=c4d, c4d=c1d,c1_sth_init = c4_sth_init, c1_flag=c4_flag, c0_flag=c3_flag] endmodule

module Client5=Client1[p_1_1=p_5_1,p_1_2=p_5_2,p_1_3=p_5_3,p_1_4=p_5_4,p_1_5=p_5_5,
g1=g5,c1=c5,c1s=c5s, c1_sth=c5_sth,c1_skip=c5_skip,c1d=c5d, c5d=c1d,c1_sth_init = c5_sth_init, c1_flag=c5_flag, c0_flag=c4_flag] endmodule


//--------------
// SERVERS
//--------------

const int sf_init = 0;

//needed for module relabelling
const int SERVER1 = 1;
const int SERVER2 = 2;
const int SERVER3 = 3;
const int SERVER4 = 4;
const int SERVER5 = 5;

//initial states of each server before gossiping begins. The bank server is chosen to be the designated server that gossips the genuine data.
const int s1_init = 0;
const int s2_init = 0;
const int s3_init = 1;
const int s4_init = 0;
const int s5_init = 0;

//server-to-server gossiping is done using a "spread-and-forget" approach: A server randomly gossips to a subset of servers uniformly by sending 
//them a message but gets nothing in return. We assume that the channels used for this communication are secure.
//
//in cases b) and c), the server will either update or find an inconsistency with the data they already have. In case d),
//the server will always go into the detection state. The probability of getting a data type can be computed using the 
//inclusion-exclusion principle (note that it is possible that a server can get real data, for example, from at least two other servers at the 
//same time so we must avoid cases of double counting!)
formula real_5c1 = (s1_sth=1?1/5:0)+(s2_sth=1?1/5:0)+(s3_sth=1?1/5:0)+(s4_sth=1?1/5:0)+(s5_sth=1?1/5:0);
formula real_5c2 = (s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)+(s1_sth=1?1/5:0)*(s3_sth=1?1/5:0)+(s1_sth=1?1/5:0)*(s4_sth=1?1/5:0)+
	   	   (s1_sth=1?1/5:0)*(s5_sth=1?1/5:0)+(s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)+(s2_sth=1?1/5:0)*(s4_sth=1?1/5:0)+
  		   (s2_sth=1?1/5:0)*(s5_sth=1?1/5:0)+(s3_sth=1?1/5:0)*(s4_sth=1?1/5:0)+(s3_sth=1?1/5:0)*(s5_sth=1?1/5:0)+
		   (s4_sth=1?1/5:0)*(s5_sth=1?1/5:0);
formula real_5c3 = (s2_sth=1?1/5:0)*(s4_sth=1?1/5:0)*(s5_sth=1?1/5:0)+(s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)+
		   (s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)*(s4_sth=1?1/5:0)+(s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)*(s5_sth=1?1/5:0)+
		   (s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)*(s4_sth=1?1/5:0)+(s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)*(s5_sth=1?1/5:0)+
		   (s3_sth=1?1/5:0)*(s1_sth=1?1/5:0)*(s4_sth=1?1/5:0)+(s3_sth=1?1/5:0)*(s1_sth=1?1/5:0)*(s5_sth=1?1/5:0)+
		   (s3_sth=1?1/5:0)*(s4_sth=1?1/5:0)*(s5_sth=1?1/5:0)+(s1_sth=1?1/5:0)*(s4_sth=1?1/5:0)*(s5_sth=1?1/5:0);
formula real_5c4 = (s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)*(s4_sth=1?1/5:0)+
		   (s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)*(s5_sth=1?1/5:0)+
		   (s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)*(s4_sth=1?1/5:0)*(s5_sth=1?1/5:0)+
		   (s1_sth=1?1/5:0)*(s3_sth=1?1/5:0)*(s4_sth=1?1/5:0)*(s5_sth=1?1/5:0)+
		   (s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)*(s4_sth=1?1/5:0)*(s5_sth=1?1/5:0);
formula real_5c5 = (s1_sth=1?1/5:0)*(s2_sth=1?1/5:0)*(s3_sth=1?1/5:0)*(s4_sth=1?1/5:0)*(s5_sth=1?1/5:0);

formula fake_5c1 = (s1_sth=2?1/5:0)+(s2_sth=2?1/5:0)+(s3_sth=2?1/5:0)+(s4_sth=2?1/5:0)+(s5_sth=2?1/5:0);
formula fake_5c2 = (s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)+(s1_sth=2?1/5:0)*(s3_sth=2?1/5:0)+(s1_sth=2?1/5:0)*(s4_sth=2?1/5:0)+
	           (s1_sth=2?1/5:0)*(s5_sth=2?1/5:0)+(s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)+(s2_sth=2?1/5:0)*(s4_sth=2?1/5:0)+
	 	   (s2_sth=2?1/5:0)*(s5_sth=2?1/5:0)+(s3_sth=2?1/5:0)*(s4_sth=2?1/5:0)+(s3_sth=2?1/5:0)*(s5_sth=2?1/5:0)+
	   	   (s4_sth=2?1/5:0)*(s5_sth=2?1/5:0);
formula fake_5c3 = (s2_sth=2?1/5:0)*(s4_sth=2?1/5:0)*(s5_sth=2?1/5:0)+(s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)+
	  	   (s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)*(s4_sth=2?1/5:0)+(s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)*(s5_sth=2?1/5:0)+
	  	   (s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)*(s4_sth=2?1/5:0)+(s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)*(s5_sth=2?1/5:0)+
	   	   (s3_sth=2?1/5:0)*(s1_sth=2?1/5:0)*(s4_sth=2?1/5:0)+(s3_sth=2?1/5:0)*(s1_sth=2?1/5:0)*(s5_sth=2?1/5:0)+
	   	   (s3_sth=2?1/5:0)*(s4_sth=2?1/5:0)*(s5_sth=2?1/5:0)+(s1_sth=2?1/5:0)*(s4_sth=2?1/5:0)*(s5_sth=2?1/5:0);
formula fake_5c4 = (s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)*(s4_sth=2?1/5:0)+
	   	   (s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)*(s5_sth=2?1/5:0)+
	 	   (s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)*(s4_sth=2?1/5:0)*(s5_sth=2?1/5:0)+
	 	   (s1_sth=2?1/5:0)*(s3_sth=2?1/5:0)*(s4_sth=2?1/5:0)*(s5_sth=2?1/5:0)+
		   (s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)*(s4_sth=2?1/5:0)*(s5_sth=2?1/5:0);
formula fake_5c5 = (s1_sth=2?1/5:0)*(s2_sth=2?1/5:0)*(s3_sth=2?1/5:0)*(s4_sth=2?1/5:0)*(s5_sth=2?1/5:0);

formula mssg_5c1 = (s1d?1/5:0)+(s2d?1/5:0)+(s3d?1/5:0)+(s4d?1/5:0)+(s5d?1/5:0);
formula mssg_5c2 = (s1d?1/5:0)*(s2d?1/5:0)+(s1d?1/5:0)*(s3d?1/5:0)+(s1d?1/5:0)*(s4d?1/5:0)+
		   (s1d?1/5:0)*(s5d?1/5:0)+(s2d?1/5:0)*(s3d?1/5:0)+(s2d?1/5:0)*(s4d?1/5:0)+
		   (s2d?1/5:0)*(s5d?1/5:0)+(s3d?1/5:0)*(s4d?1/5:0)+(s3d?1/5:0)*(s5d?1/5:0)+
		   (s4d?1/5:0)*(s5d?1/5:0);
formula mssg_5c3 = (s2d?1/5:0)*(s4d?1/5:0)*(s5d?1/5:0)+(s1d?1/5:0)*(s2d?1/5:0)*(s3d?1/5:0)+
		   (s1d?1/5:0)*(s2d?1/5:0)*(s4d?1/5:0)+(s1d?1/5:0)*(s2d?1/5:0)*(s5d?1/5:0)+
		   (s2d?1/5:0)*(s3d?1/5:0)*(s4d?1/5:0)+(s2d?1/5:0)*(s3d?1/5:0)*(s5d?1/5:0)+
		   (s3d?1/5:0)*(s1d?1/5:0)*(s4d?1/5:0)+(s3d?1/5:0)*(s1d?1/5:0)*(s5d?1/5:0)+
		   (s3d?1/5:0)*(s4d?1/5:0)*(s5d?1/5:0)+(s1d?1/5:0)*(s4d?1/5:0)*(s5d?1/5:0);
formula mssg_5c4 = (s1d?1/5:0)*(s2d?1/5:0)*(s3d?1/5:0)*(s4d?1/5:0)+
		   (s1d?1/5:0)*(s2d?1/5:0)*(s3d?1/5:0)*(s5d?1/5:0)+
		   (s1d?1/5:0)*(s2d?1/5:0)*(s4d?1/5:0)*(s5d?1/5:0)+
		   (s1d?1/5:0)*(s3d?1/5:0)*(s4d?1/5:0)*(s5d?1/5:0)+
		   (s2d?1/5:0)*(s3d?1/5:0)*(s4d?1/5:0)*(s5d?1/5:0);
formula mssg_5c5 = (s1d?1/5:0)*(s2d?1/5:0)*(s3d?1/5:0)*(s4d?1/5:0)*(s5d?1/5:0);

formula get_real_data = real_5c1 - real_5c2 + real_5c3 - real_5c4 + real_5c5;
formula get_fake_data = fake_5c1 - fake_5c2 + fake_5c3 - fake_5c4 + fake_5c5; 
formula get_message   = mssg_5c1 - mssg_5c2 + mssg_5c3 - mssg_5c4 + mssg_5c5;

module Server1

	//does the server have the latest STH?
	s1_sth : [0..2] init s1_init;
	//detection state
	s1d : bool init false;
	s1_flag : [0..2] init sf_init;

	//ORIGINAL DESIGN - PERRIG ET AL RPOTOCOLS
	//If any clients sends inconsistent data, cease protocol execution and go into detection state.
	[update] !s1d & c_data_ok -> (s1_sth'=s_update);
	[update] !s1d & !c_data_ok -> (s1d'=true);
	[update] s1d -> true;
	//NEW DESIGN MODIFICATION - SERVER-TO-SERVER GOSSIP (comment this section if analysing only the original Perrig et al. design)
	//'connect' stage - servers with the real data gossip.
	[spread1] !detect & s1_flag=0 & !s1d & s1_sth=0 -> get_real_data : (s1_sth'=1) & (s1_flag'=1) + 1-get_real_data : (s1_flag'=1);
	[spread1] !detect & s1_flag=0 & !s1d & s1_sth=1 -> (s1_flag'=1);
	[spread1] !detect & s1_flag=0 & !s1d & s1_sth=2 -> get_real_data : (s1d'=true) & (s1_sth'=0) & (s1_flag'=1) + 1-get_real_data : (s1_flag'=1);
	[spread1] !detect & s1_flag=0 & s1d -> (s1_flag'=1);
	//'choose' stage - servers with the fake data gossip.
	[spread2] s1_flag=1 & !s1d & s1_sth=0 -> get_fake_data : (s1_sth'=2) & (s1_flag'=2)  + 1-get_fake_data : (s1_flag'=2);
	[spread2] s1_flag=1 & !s1d & s1_sth=1 -> get_fake_data : (s1d'=true) & (s1_sth'=0) & (s1_flag'=2) + 1-get_fake_data : (s1_flag'=2);
	[spread2] s1_flag=1 & !s1d & s1_sth=2 -> (s1_flag'=2);
	[spread2] s1_flag=1 & s1d -> (s1_flag'=2);
	//'round complete' stage - servers in detection mode gossip warning messages.
	[round_complete] true -> get_message : (s1d'=true) & (s1_sth'=0) & (s1_flag'=sf_init) + 1-get_message : (s1_flag'=sf_init);
	//self-looping state
	[END] true -> true;

endmodule

//Servers update when given brand new data via a connected client.
formula server_pr_req_fail = (c1s=SERVER1 & c1_sth+s1_sth=3) | (c2s=SERVER1 & c2_sth+s1_sth=3) | (c3s=SERVER1 & c3_sth+s1_sth=3) | (c4s=SERVER1 & c4_sth+s1_sth=3) | (c5s=SERVER1 & c5_sth+s1_sth=3);
//The following formulae is used for the 'update' stage in server 1.
//Server-side, an issue will be found in the data if either a) log cannot provide a valid proof or b) a pair of clients connect with inconsistent data.
formula pairwise_inconsistency = ((c1s=SERVER1 & c1_sth=1) | (c2s=SERVER1 & c2_sth=1) | (c3s=SERVER1 & c3_sth=1) | (c4s=SERVER1 & c4_sth=1) | (c5s=SERVER1 & c5_sth=1)) & ((c1s=SERVER1 & c1_sth=2) | (c2s=SERVER1 & c2_sth=2) | (c3s=SERVER1 & c3_sth=2) | (c4s=SERVER1 & c4_sth=2) | (c5s=SERVER1 & c5_sth=2));formula s_update = s1_sth + max((c1s=SERVER1 & c1_sth>s1_sth?c1_sth-s1_sth:0),(c2s=SERVER1 & c2_sth>s1_sth?c2_sth-s1_sth:0),(c3s=SERVER1 & c3_sth>s1_sth?c3_sth-s1_sth:0),(c4s=SERVER1 & c4_sth>s1_sth?c4_sth-s1_sth:0),(c5s=SERVER1 & c5_sth>s1_sth?c5_sth-s1_sth:0));
formula c_data_ok = !server_pr_req_fail & !pairwise_inconsistency;

module Server2=Server1[s1_sth=s2_sth, s2_sth=s1_sth,s1d=s2d,s2d=s1d,SERVER1=SERVER2,s1_init=s2_init,s1_flag=s2_flag] endmodule
module Server3=Server1[s1_sth=s3_sth, s3_sth=s1_sth,s1d=s3d,s3d=s1d,SERVER1=SERVER3,s1_init=s3_init,s1_flag=s3_flag] endmodule
module Server4=Server1[s1_sth=s4_sth, s4_sth=s1_sth,s1d=s4d,s4d=s1d,SERVER1=SERVER4,s1_init=s4_init,s1_flag=s4_flag] endmodule
module Server5=Server1[s1_sth=s5_sth, s5_sth=s1_sth,s1d=s5d,s5d=s1d,SERVER1=SERVER5,s1_init=s5_init,s1_flag=s5_flag] endmodule

//--------------
// FORMULAS
//--------------

const double f = 1/5;

//Keeps track of the proportion of clients that have the latest STH - max sum should equal 1.
formula no_clients_old = (c1_sth=0?f:0)+(c2_sth=0?f:0)+(c3_sth=0?f:0)+(c4_sth=0?f:0)+(c5_sth=0?f:0);
formula no_clients_real = (c1_sth=1?f:0)+(c2_sth=1?f:0)+(c3_sth=1?f:0)+(c4_sth=1?f:0)+(c5_sth=1?f:0);
formula no_clients_fake = (c1_sth=2?f:0)+(c2_sth=2?f:0)+(c3_sth=2?f:0)+(c4_sth=2?f:0)+(c5_sth=2?f:0);
//Keeps track of the log connection currently being made using the STH-Only protocol
formula client1_getConsistency_STHOnly = c1_skip=false & c1=2 & ((c1s=1 & c1_sth!=s1_sth) | (c1s=2 & c1_sth!=s2_sth) | (c1s=3 & c1_sth!=s3_sth) | (c1s=4 & c1_sth!=s4_sth) | (c1s=5 & c1_sth!=s5_sth));
formula client2_getConsistency_STHOnly = c2_skip=false & c2=2 & ((c2s=1 & c2_sth!=s1_sth) | (c2s=2 & c2_sth!=s2_sth) | (c2s=3 & c2_sth!=s3_sth) | (c2s=4 & c2_sth!=s4_sth) | (c2s=5 & c2_sth!=s5_sth));
formula client3_getConsistency_STHOnly = c3_skip=false & c3=2 & ((c3s=1 & c3_sth!=s1_sth) | (c3s=2 & c3_sth!=s2_sth) | (c3s=3 & c3_sth!=s3_sth) | (c3s=4 & c3_sth!=s4_sth) | (c3s=5 & c3_sth!=s5_sth));
formula client4_getConsistency_STHOnly = c4_skip=false & c4=2 & ((c4s=1 & c4_sth!=s1_sth) | (c4s=2 & c4_sth!=s2_sth) | (c4s=3 & c4_sth!=s3_sth) | (c4s=4 & c4_sth!=s4_sth) | (c4s=5 & c4_sth!=s5_sth));
formula client5_getConsistency_STHOnly = c5_skip=false & c5=2 & ((c5s=1 & c5_sth!=s1_sth) | (c5s=2 & c5_sth!=s2_sth) | (c5s=3 & c5_sth!=s3_sth) | (c5s=4 & c5_sth!=s4_sth) | (c5s=5 & c5_sth!=s5_sth));
formula log_connections_STHOnly = (client1_getConsistency_STHOnly?1:0)+(client2_getConsistency_STHOnly?1:0)+(client3_getConsistency_STHOnly?1:0)+(client4_getConsistency_STHOnly?1:0)+(client5_getConsistency_STHOnly?1:0);

//Keeps track of the log connection currently being made using the STH-and-Proof protocol
formula client1_getConsistency_STHAndProof = c1_skip=false & c1=2 & ((c1s=1 & (c1_sth>s1_sth | (c1_sth=1 & s1_sth=2))) | (c1s=2 & (c1_sth>s2_sth | (c1_sth=1 & s2_sth=2))) | (c1s=3 & (c1_sth>s3_sth | (c1_sth=1 & s3_sth=2))) | (c1s=4 & (c1_sth>s4_sth | (c1_sth=1 & s4_sth=2))) | (c1s=5 & (c1_sth>s5_sth | (c1_sth=1 & s5_sth=2))));
formula client2_getConsistency_STHAndProof = c2_skip=false & c2=2 & ((c2s=1 & (c2_sth>s1_sth | (c2_sth=1 & s1_sth=2))) | (c2s=2 & (c2_sth>s2_sth | (c2_sth=1 & s2_sth=2))) | (c2s=3 & (c2_sth>s3_sth | (c2_sth=1 & s3_sth=2))) | (c2s=4 & (c2_sth>s4_sth | (c2_sth=1 & s4_sth=2))) | (c2s=5 & (c2_sth>s5_sth | (c2_sth=1 & s5_sth=2))));
formula client3_getConsistency_STHAndProof = c3_skip=false & c3=2 & ((c3s=1 & (c3_sth>s1_sth | (c3_sth=1 & s1_sth=2))) | (c3s=2 & (c3_sth>s2_sth | (c3_sth=1 & s2_sth=2))) | (c3s=3 & (c3_sth>s3_sth | (c3_sth=1 & s3_sth=2))) | (c3s=4 & (c3_sth>s4_sth | (c3_sth=1 & s4_sth=2))) | (c3s=5 & (c3_sth>s5_sth | (c3_sth=1 & s5_sth=2))));
formula client4_getConsistency_STHAndProof = c4_skip=false & c4=2 & ((c4s=1 & (c4_sth>s1_sth | (c4_sth=1 & s1_sth=2))) | (c4s=2 & (c4_sth>s2_sth | (c4_sth=1 & s2_sth=2))) | (c4s=3 & (c4_sth>s3_sth | (c4_sth=1 & s3_sth=2))) | (c4s=4 & (c4_sth>s4_sth | (c4_sth=1 & s4_sth=2))) | (c4s=5 & (c4_sth>s5_sth | (c4_sth=1 & s5_sth=2))));
formula client5_getConsistency_STHAndProof = c5_skip=false & c5=2 & ((c5s=1 & (c5_sth>s1_sth | (c5_sth=1 & s1_sth=2))) | (c5s=2 & (c5_sth>s2_sth | (c5_sth=1 & s2_sth=2))) | (c5s=3 & (c5_sth>s3_sth | (c5_sth=1 & s3_sth=2))) | (c5s=4 & (c5_sth>s4_sth | (c5_sth=1 & s4_sth=2))) | (c5s=5 & (c5_sth>s5_sth | (c5_sth=1 & s5_sth=2))));
formula log_connections_STHAndProof = (client1_getConsistency_STHAndProof?1:0)+(client2_getConsistency_STHAndProof?1:0)+(client3_getConsistency_STHAndProof?1:0)+(client4_getConsistency_STHAndProof?1:0)+(client5_getConsistency_STHAndProof?1:0);


//--------------
// REWARD STRUCTURES
//--------------

rewards "client_proportion_old"
	true : no_clients_old;
endrewards

rewards "client_proportion_real"
	true : no_clients_real;
endrewards

rewards "client_proportion_fake"
	true : no_clients_fake;
endrewards

rewards "log_connections_STHOnly"
	[update] true: log_connections_STHOnly;
endrewards

rewards "log_connections_STHAndProof"
	[update] true : log_connections_STHAndProof;
endrewards
