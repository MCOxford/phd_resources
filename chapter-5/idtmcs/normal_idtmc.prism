// Author: mco
// Timestamp: 16/09/2020

dtmc
	
//initial states for each client
const bool c1_sth_init = false;
const bool c2_sth_init = false;
const bool c3_sth_init = true;

//client connect rates
prob g1 = 0.5 ;
prob g2 = 0.5 ;
prob g3 = 0.5 ;

//client profiles
prob p_1_1_L = 0.01 ;
prob p_1_2_L = 0.2 ;
prob p_1_3_L = 0.2 ;
prob p_1_4_L = 0.3;
prob p_1_5_L = 1E-14 ;
prob p_1_1_H = 0.1 ;
prob p_1_2_H = 0.4 ;
prob p_1_3_H = 0.3 ;
prob p_1_4_H = 0.4;
prob p_1_5_H = 0.29 ;

prob p_2_1_L = 0.01 ;
prob p_2_2_L = 0.2;
prob p_2_3_L = 0.4;
prob p_2_4_L = 0.2 ;
prob p_2_5_L = 1E-14;
prob p_2_1_H = 0.1 ;
prob p_2_2_H = 0.4;
prob p_2_3_H = 0.5;
prob p_2_4_H = 0.3 ;
prob p_2_5_H = 0.19 ;

prob p_3_1_L = 0.01;
prob p_3_2_L = 0.2;
prob p_3_3_L = 0.15;
prob p_3_4_L = 0.15;
prob p_3_5_L = 1E-14;
prob p_3_1_H = 0.1 ;
prob p_3_2_H = 0.4;
prob p_3_3_H = 0.25 ;
prob p_3_4_H = 0.25 ;
prob p_3_5_H = 0.49 ;

const double err = 0.02;
		
module Client1 

	//global state.
	c1 : [0..5] init 0;
	//connectivity state.
	c1s : [0..5] init 0;
	//current STH data stored by the client. 'True' means the client has the latest STH.
	c1_sth : bool init c1_sth_init;
	//skip the round?
	c1_skip : bool init false;

	//client decides randomly to participate in the round.
	[connect] c1=0 -> [g1-err, g1+err] : (c1'=1) + [1-(g1+err), 1-(g1-err)] : (c1'=1) & (c1_skip'=true);
	//client randomly chooses a server if participating in the round.
	[choose] c1_skip=false & c1=1 -> [p_1_1_L, p_1_1_H] : (c1'=2)&(c1s'=1) + 
									 [p_1_2_L, p_1_2_H] : (c1'=2)&(c1s'=2) + 
									 [p_1_3_L, p_1_3_H] : (c1'=2)&(c1s'=3) + 
					 				 [p_1_4_L, p_1_4_H] : (c1'=2)&(c1s'=4) + 
					 				 [p_1_5_L, p_1_5_H] : (c1'=2)&(c1s'=5);
	[choose] c1_skip=true & c1=1 -> (c1'=2);
	//client updates itself using data retrieved from server so long as c1_skip=false or c1_sth=true.
	[update] c1_skip=false & c1=2 & connected_server_has_sth  -> (c1'=3) & (c1_sth'=true);
	[update] c1=2 & ((c1_skip=false & !connected_server_has_sth) | c1_skip=true) -> (c1'=3);
	//round complete - reset if there is a client who is not yet updated. Otherwise, stop.
	[round_complete] c1=3 & !clients_all_updated -> (c1'=0) & (c1s'=0) & (c1_skip'=false);
	[round_complete] c1=3 & clients_all_updated -> (c1'=4);
	//self-looping state - go here when every client is updated.
	[END] c1=4 -> true;

endmodule

formula connected_server_has_sth = ((c1s=1 & s1_sth) | (c1s=2 & s2_sth) | (c1s=3 & s3_sth) | (c1s=4 & s4_sth) | (c1s=5 & s5_sth));
formula clients_all_updated = c1_sth&c2_sth&c3_sth;
label "clients_all_updated" = c1_sth&c2_sth&c3_sth;

module Client2=Client1[p_1_1_L = p_2_1_L, p_1_2_L = p_2_2_L, p_1_3_L = p_2_3_L, p_1_4_L = p_2_4_L, p_1_5_L = p_2_5_L,
p_1_1_H = p_2_1_H, p_1_2_H = p_2_2_H, p_1_3_H = p_2_3_H, p_1_4_H = p_2_4_H, p_1_5_H = p_2_5_H,
g1=g2,c1=c2,c1s=c2s, c1_sth=c2_sth, c2_sth=c1_sth, c1_skip=c2_skip, c1_sth_init = c2_sth_init] endmodule

module Client3=Client1[p_1_1_L = p_3_1_L, p_1_2_L = p_3_2_L, p_1_3_L = p_3_3_L, p_1_4_L = p_3_4_L, p_1_5_L = p_3_5_L,
p_1_1_H = p_3_1_H, p_1_2_H = p_3_2_H, p_1_3_H = p_3_3_H, p_1_4_H = p_3_4_H, p_1_5_H = p_3_5_H,
g1=g3,c1=c3,c1s=c3s, c1_sth=c3_sth, c3_sth=c1_sth, c1_skip=c3_skip, c1_sth_init = c3_sth_init] endmodule
	
//needed for module relabelling
const bool s1_init = true;
const bool s2_init = false;
const bool s3_init = false;
const bool s4_init = false;
const bool s5_init = false;

		
//needed for module relabelling
const int S1 = 1;
const int S2 = 2;
const int S3 = 3;
const int S4 = 4;
const int S5 = 5;

module Server1

	//does the server have the latest STH?
	s1_sth : bool init s1_init;

	//update if a connected client has the latest STH
	[update] !s1_sth & connected_client_has_sth -> (s1_sth'=true);
	[update] s1_sth | (!s1_sth & !connected_client_has_sth) -> true;
	//end when every client is updated
	[END] true -> true;

endmodule

formula connected_client_has_sth = (c1s=S1 & c1_sth) | (c2s=S1 & c2_sth) | (c3s=S1 & c3_sth);

module Server2=Server1[s1_sth=s2_sth, s2_sth=s1_sth, S1=S2, s1_init=s2_init] endmodule
module Server3=Server1[s1_sth=s3_sth, s3_sth=s1_sth, S1=S3, s1_init=s3_init] endmodule
module Server4=Server1[s1_sth=s4_sth, s4_sth=s1_sth, S1=S4, s1_init=s4_init] endmodule
module Server5=Server1[s1_sth=s5_sth, s5_sth=s1_sth, S1=S5, s1_init=s5_init] endmodule